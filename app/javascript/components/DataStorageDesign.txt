there are:

sets of ids
	purchasedItemIds
	selectedPurchaseableItemIds
	selectedUpgradeIds
	selectedExchangeIds

hashes for each model, mapping id for each record to the full record
	item
	itemType
	exclusion
	upgrade
	qualifier

arrays of records
	items // == Item.all
	itemTypes // == ItemType.all
	exclusions // == Exclusion.all
	conversions // == Conversion.all
	qualifiers // == Qualifier.all
	availableUpgrades // the conversions that are displayed on the upgradesTable
	availableExchanges // the conversions displayed on the exchangesTable

a single object for the current user
	currentUser


Given that an ItemType t has many Items, we should be able to call something like
t.items

Furhermore, given a set of ItemTypes types, we should be able to call something like
types.items
to get a set of all items associated with any of the types.
This direct syntax would be tricky.  We would need to define our own collection class.
Easier to have a syntax like
types.all(items)

or similarly
exclusions.all(excludedItems)

